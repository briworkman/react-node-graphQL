{"ast":null,"code":"import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","MeDocument","betterUpdateQuery","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","me","login","result","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAAkCC,UAAlC,QAAqF,sBAArF;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACnDC,IAAAA,GAAG,EAAE,+BAD8C;AAEnDC,IAAAA,YAAY,EAAE;AACVC,MAAAA,WAAW,EAAE;AADH,KAFqC;AAKnDC,IAAAA,SAAS,EAAE,CACPV,aADO,EAEPE,aAAa,CAAC;AACVS,MAAAA,OAAO,EAAE;AACLC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACpCb,YAAAA,iBAAiB,CACbY,KADa,EAEb;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAFa,EAGbW,OAHa,EAIb;AAAA,qBAAO;AAAEK,gBAAAA,EAAE,EAAE;AAAN,eAAP;AAAA,aAJa,CAAjB;AAMH,WARK;AASNC,UAAAA,KAAK,EAAE,eAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACnCb,YAAAA,iBAAiB,CACbY,KADa,EAEb;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAFa,EAGbW,OAHa,EAIb,UAACO,MAAD,EAASH,KAAT,EAAmB;AACf,kBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACrB,uBAAOJ,KAAP;AACH,eAFD,MAEO;AACH,uBAAO;AACHC,kBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADd,iBAAP;AAGH;AACJ,aAZY,CAAjB;AAcH,WAxBK;AAyBNC,UAAAA,QAAQ,EAAE,kBAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtCb,YAAAA,iBAAiB,CACbY,KADa,EAEb;AAAEE,cAAAA,KAAK,EAAEf;AAAT,aAFa,EAGbW,OAHa,EAIb,UAACO,MAAD,EAASH,KAAT,EAAmB;AACf,kBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AACxB,uBAAOJ,KAAP;AACH,eAFD,MAEO;AACH,uBAAO;AACHC,kBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADjB,iBAAP;AAGH;AACJ,aAZY,CAAjB;AAcH;AAxCK;AADL;AADC,KAAD,CAFN,EAgDPjB,WAhDO,EAiDPL,aAjDO;AALwC,GAAvB;AAAA,CAAzB","sourcesContent":["import { dedupExchange, fetchExchange } from \"urql\"\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { LogoutMutation, MeQuery, MeDocument, LoginMutation, RegisterMutation } from \"../generated/graphql\"\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n        credentials: \"include\" as const,\n    },\n    exchanges: [\n        dedupExchange,\n        cacheExchange({\n            updates: {\n                Mutation: {\n                    logout: (_result, args, cache, info) => {\n                        betterUpdateQuery<LogoutMutation, MeQuery>(\n                            cache,\n                            { query: MeDocument },\n                            _result,\n                            () => ({ me: null })\n                        )\n                    },\n                    login: (_result, args, cache, info) => {\n                        betterUpdateQuery<LoginMutation, MeQuery>(\n                            cache,\n                            { query: MeDocument },\n                            _result,\n                            (result, query) => {\n                                if (result.login.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.login.user,\n                                    };\n                                }\n                            }\n                        );\n                    },\n                    register: (_result, args, cache, info) => {\n                        betterUpdateQuery<RegisterMutation, MeQuery>(\n                            cache,\n                            { query: MeDocument },\n                            _result,\n                            (result, query) => {\n                                if (result.register.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.register.user,\n                                    };\n                                }\n                            }\n                        );\n                    },\n                },\n            },\n        }),\n        ssrExchange,\n        fetchExchange,\n    ],\n})"]},"metadata":{},"sourceType":"module"}