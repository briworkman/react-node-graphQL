{"ast":null,"code":"import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","MeDocument","betterUpdateQuery","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","me","login","result","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,MAA7C;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAAkCC,UAAlC,QAAqF,sBAArF;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,KAAuB;AACnDC,EAAAA,GAAG,EAAE,+BAD8C;AAEnDC,EAAAA,YAAY,EAAE;AACVC,IAAAA,WAAW,EAAE;AADH,GAFqC;AAKnDC,EAAAA,SAAS,EAAE,CACPV,aADO,EAEPE,aAAa,CAAC;AACVS,IAAAA,OAAO,EAAE;AACLC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACpCb,UAAAA,iBAAiB,CACbY,KADa,EAEb;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFa,EAGbW,OAHa,EAIb,OAAO;AAAEK,YAAAA,EAAE,EAAE;AAAN,WAAP,CAJa,CAAjB;AAMH,SARK;AASNC,QAAAA,KAAK,EAAE,CAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACnCb,UAAAA,iBAAiB,CACbY,KADa,EAEb;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFa,EAGbW,OAHa,EAIb,CAACO,MAAD,EAASH,KAAT,KAAmB;AACf,gBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACrB,qBAAOJ,KAAP;AACH,aAFD,MAEO;AACH,qBAAO;AACHC,gBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADd,eAAP;AAGH;AACJ,WAZY,CAAjB;AAcH,SAxBK;AAyBNC,QAAAA,QAAQ,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtCb,UAAAA,iBAAiB,CACbY,KADa,EAEb;AAAEE,YAAAA,KAAK,EAAEf;AAAT,WAFa,EAGbW,OAHa,EAIb,CAACO,MAAD,EAASH,KAAT,KAAmB;AACf,gBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AACxB,qBAAOJ,KAAP;AACH,aAFD,MAEO;AACH,qBAAO;AACHC,gBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADjB,eAAP;AAGH;AACJ,WAZY,CAAjB;AAcH;AAxCK;AADL;AADC,GAAD,CAFN,EAgDPjB,WAhDO,EAiDPL,aAjDO;AALwC,CAAvB,CAAzB","sourcesContent":["import { dedupExchange, fetchExchange } from \"urql\"\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { LogoutMutation, MeQuery, MeDocument, LoginMutation, RegisterMutation } from \"../generated/graphql\"\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n        credentials: \"include\" as const,\n    },\n    exchanges: [\n        dedupExchange,\n        cacheExchange({\n            updates: {\n                Mutation: {\n                    logout: (_result, args, cache, info) => {\n                        betterUpdateQuery<LogoutMutation, MeQuery>(\n                            cache,\n                            { query: MeDocument },\n                            _result,\n                            () => ({ me: null })\n                        )\n                    },\n                    login: (_result, args, cache, info) => {\n                        betterUpdateQuery<LoginMutation, MeQuery>(\n                            cache,\n                            { query: MeDocument },\n                            _result,\n                            (result, query) => {\n                                if (result.login.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.login.user,\n                                    };\n                                }\n                            }\n                        );\n                    },\n                    register: (_result, args, cache, info) => {\n                        betterUpdateQuery<RegisterMutation, MeQuery>(\n                            cache,\n                            { query: MeDocument },\n                            _result,\n                            (result, query) => {\n                                if (result.register.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.register.user,\n                                    };\n                                }\n                            }\n                        );\n                    },\n                },\n            },\n        }),\n        ssrExchange,\n        fetchExchange,\n    ],\n})"]},"metadata":{},"sourceType":"module"}