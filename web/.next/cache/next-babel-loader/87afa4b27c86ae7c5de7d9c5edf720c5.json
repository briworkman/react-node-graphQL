{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/pages/change-password/[token].tsx\";\n\nvar __jsx = React.createElement;\nimport { Button } from \"@chakra-ui/core\";\nimport { Formik, Form } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\n\nvar ChangePassword = function ChangePassword(_ref) {\n  var token = _ref.token;\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setErrors;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, __jsx(InputField, {\n      name: \"newPassword\",\n      placeholder: \"new password\",\n      label: \"New Password\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }\n    }), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }\n    }, \"change password\"));\n  }));\n};\n\n_c = ChangePassword;\n\nChangePassword.getInitialProps = function (_ref5) {\n  var query = _ref5.query;\n  return {\n    token: query.token\n  };\n};\n\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/pages/change-password/[token].tsx"],"names":["Button","Formik","Form","React","InputField","Wrapper","ChangePassword","token","newPassword","values","setErrors","isSubmitting","getInitialProps","query"],"mappings":";;;;;;;AAAA,SAAcA,MAAd,QAA4B,iBAA5B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;;AAIA,IAAMC,cAA2C,GAAG,SAA9CA,cAA8C,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC/D,SACI,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AACI,IAAA,aAAa,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KADnB;AAEI,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,SAAiBA,SAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYK;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACG,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AACI,MAAA,IAAI,EAAC,aADT;AAEI,MAAA,WAAW,EAAC,cAFhB;AAGI,MAAA,KAAK,EAAC,cAHV;AAII,MAAA,IAAI,EAAC,UAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOI,MAAC,MAAD;AACI,MAAA,EAAE,EAAE,CADR;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,SAAS,EAAEA,YAHf;AAII,MAAA,YAAY,EAAC,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPJ,CADH;AAAA,GAZL,CADJ,CADJ;AAmCH,CApCD;;KAAML,c;;AAsCNA,cAAc,CAACM,eAAf,GAAiC,iBAAe;AAAA,MAAZC,KAAY,SAAZA,KAAY;AAC5C,SAAO;AACHN,IAAAA,KAAK,EAAEM,KAAK,CAACN;AADV,GAAP;AAGH,CAJD;;AAMA,eAAeD,cAAf","sourcesContent":["import { Box, Button } from \"@chakra-ui/core\";\nimport { Formik, Form } from \"formik\";\nimport { NextPage } from \"next\";\nimport React from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nimport login from \"../login\";\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n    return (\n        <Wrapper variant=\"small\">\n            <Formik\n                initialValues={{ newPassword: '' }}\n                onSubmit={async (values, { setErrors }) => {\n                    //   const response = await login(values);\n                    //   if (response.data?.login.errors) {\n                    //     setErrors(toErrorMap(response.data.login.errors));\n                    //   } else if (response.data?.login.user) {\n                    //     // worked\n                    //     router.push(\"/\");\n                    //   }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <Form>\n                        <InputField\n                            name=\"newPassword\"\n                            placeholder=\"new password\"\n                            label=\"New Password\"\n                            type='password'\n                        />\n                        <Button\n                            mt={4}\n                            type=\"submit\"\n                            isLoading={isSubmitting}\n                            variantColor=\"teal\"\n                        >\n                            change password\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Wrapper>\n    );\n}\n\nChangePassword.getInitialProps = ({ query }) => {\n    return {\n        token: query.token as string\n    }\n}\n\nexport default ChangePassword"]},"metadata":{},"sourceType":"module"}