{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/pages/change-password/[token].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { toErrorMap } from \"../../utils/toErrorMap\";\n\nvar ChangePassword = function ChangePassword(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var router = useRouter();\n\n  var _useChangePasswordMut = useChangePasswordMutation(),\n      _useChangePasswordMut2 = _slicedToArray(_useChangePasswordMut, 2),\n      changePassword = _useChangePasswordMut2[1];\n\n  var _useState = useState(''),\n      tokenError = _useState[0],\n      setTokenError = _useState[1];\n\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var _response$data, _response$data2;\n\n        var setErrors, response, errorMap;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return changePassword({\n                  newPassword: values.newPassword,\n                  token: token\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n                  errorMap = toErrorMap(response.data.changePassword.errors);\n\n                  if ('token' in errorMap) {\n                    setTokenError(errorMap.token);\n                  }\n\n                  setErrors(errorMap);\n                } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n                  // worked\n                  router.push(\"/\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, __jsx(InputField, {\n      name: \"newPassword\",\n      placeholder: \"new password\",\n      label: \"New Password\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }\n    }), tokenError ? __jsx(Box, {\n      color: \"red\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 39\n      }\n    }, tokenError) : null, __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }\n    }, \"change password\"));\n  }));\n};\n\n_s(ChangePassword, \"72KrU46ZzG1+BH3OGhB0j6CEbZk=\", false, function () {\n  return [useRouter, useChangePasswordMutation];\n});\n\n_c = ChangePassword;\n\nChangePassword.getInitialProps = function (_ref5) {\n  var query = _ref5.query;\n  return {\n    token: query.token\n  };\n};\n\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/pages/change-password/[token].tsx"],"names":["Box","Button","Form","Formik","useRouter","React","useState","InputField","Wrapper","useChangePasswordMutation","toErrorMap","ChangePassword","token","router","changePassword","tokenError","setTokenError","newPassword","values","setErrors","response","data","errors","errorMap","user","push","isSubmitting","getInitialProps","query"],"mappings":"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","sourcesContent":["import { Box, Button } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { NextPage } from \"next\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { toErrorMap } from \"../../utils/toErrorMap\";\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n    const router = useRouter();\n    const [, changePassword] = useChangePasswordMutation();\n    const [tokenError, setTokenError] = useState('');\n\n    return (\n        <Wrapper variant=\"small\">\n            <Formik\n                initialValues={{ newPassword: '' }}\n                onSubmit={async (values, { setErrors }) => {\n                    const response = await changePassword({\n                        newPassword: values.newPassword,\n                        token\n                    });\n                    if (response.data?.changePassword.errors) {\n                        const errorMap = toErrorMap(response.data.changePassword.errors)\n                        if ('token' in errorMap) {\n                            setTokenError(errorMap.token)\n                        }\n                        setErrors(errorMap);\n                    } else if (response.data?.changePassword.user) {\n                        // worked\n                        router.push(\"/\");\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <Form>\n                        <InputField\n                            name=\"newPassword\"\n                            placeholder=\"new password\"\n                            label=\"New Password\"\n                            type='password'\n                        />\n                        {tokenError ? <Box color='red'>{tokenError}</Box> : null}\n                        <Button\n                            mt={4}\n                            type=\"submit\"\n                            isLoading={isSubmitting}\n                            variantColor=\"teal\"\n                        >\n                            change password\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Wrapper>\n    );\n}\n\nChangePassword.getInitialProps = ({ query }) => {\n    return {\n        token: query.token as string\n    }\n}\n\nexport default ChangePassword"]},"metadata":{},"sourceType":"module"}