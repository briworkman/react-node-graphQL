{"ast":null,"code":"var _jsxFileName = \"/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/pages/change-password/[token].tsx\";\nvar __jsx = React.createElement;\nimport { Box, Button, Link } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { createUrqlClient } from \"../../utils/createUrqlClient\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nimport NextLink from 'next/link';\n\nconst ChangePassword = ({\n  token\n}) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const {\n    0: tokenError,\n    1: setTokenError\n  } = useState('');\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: ''\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await changePassword({\n        newPassword: values.newPassword,\n        token\n      });\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n        const errorMap = toErrorMap(response.data.changePassword.errors);\n\n        if ('token' in errorMap) {\n          setTokenError(errorMap.token);\n        }\n\n        setErrors(errorMap);\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n        // worked\n        router.push(\"/\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, __jsx(InputField, {\n    name: \"newPassword\",\n    placeholder: \"new password\",\n    label: \"New Password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }), tokenError ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }\n  }, __jsx(Box, {\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }\n  }, tokenError), __jsx(NextLink, {\n    href: \"/forgot-password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 33\n    }\n  }, __jsx(Link, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 37\n    }\n  }, \"Not working? Click here to try again.\"))) : null, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isLoading: isSubmitting,\n    variantColor: \"teal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"change password\"))));\n};\n\nChangePassword.getInitialProps = ({\n  query\n}) => {\n  return {\n    token: query.token\n  };\n};\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);","map":{"version":3,"sources":["/Users/brianna.workman/Documents/private-git/react-node-graphQL/web/src/pages/change-password/[token].tsx"],"names":["Box","Button","Link","Form","Formik","withUrqlClient","useRouter","React","useState","InputField","Wrapper","useChangePasswordMutation","createUrqlClient","toErrorMap","NextLink","ChangePassword","token","router","changePassword","tokenError","setTokenError","newPassword","values","setErrors","response","data","errors","errorMap","user","push","isSubmitting","getInitialProps","query"],"mappings":"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","sourcesContent":["import { Box, Button, Flex, Link } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { NextPage } from \"next\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { createUrqlClient } from \"../../utils/createUrqlClient\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nimport NextLink from 'next/link';\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n    const router = useRouter();\n    const [, changePassword] = useChangePasswordMutation();\n    const [tokenError, setTokenError] = useState('');\n\n    return (\n        <Wrapper variant=\"small\">\n            <Formik\n                initialValues={{ newPassword: '' }}\n                onSubmit={async (values, { setErrors }) => {\n                    const response = await changePassword({\n                        newPassword: values.newPassword,\n                        token\n                    });\n                    if (response.data?.changePassword.errors) {\n                        const errorMap = toErrorMap(response.data.changePassword.errors)\n                        if ('token' in errorMap) {\n                            setTokenError(errorMap.token)\n                        }\n                        setErrors(errorMap);\n                    } else if (response.data?.changePassword.user) {\n                        // worked\n                        router.push(\"/\");\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <Form>\n                        <InputField\n                            name=\"newPassword\"\n                            placeholder=\"new password\"\n                            label=\"New Password\"\n                            type='password'\n                        />\n                        {tokenError ?\n                            <Box>\n                                <Box color='red'>{tokenError}</Box>\n                                <NextLink href=\"/forgot-password\">\n                                    <Link>Not working? Click here to try again.</Link>\n                                </NextLink>\n                            </Box>\n                            : null}\n                        <Button\n                            mt={4}\n                            type=\"submit\"\n                            isLoading={isSubmitting}\n                            variantColor=\"teal\"\n                        >\n                            change password\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </Wrapper>\n    );\n}\n\nChangePassword.getInitialProps = ({ query }) => {\n    return {\n        token: query.token as string\n    }\n}\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);"]},"metadata":{},"sourceType":"module"}