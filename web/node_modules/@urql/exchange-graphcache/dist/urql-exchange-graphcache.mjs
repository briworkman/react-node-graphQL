function p(a) {
  return a.name.value;
}

function v(a) {
  return a.selectionSet ? a.selectionSet.selections : [];
}

function aa(a) {
  return (a = a.typeCondition) ? p(a) : null;
}

function ba(a, b) {
  var e, f, g, h, c = {}, d = 0;
  if (a.arguments && a.arguments.length) {
    for (e = 0, f = a.arguments.length; e < f; e++) {
      null != (h = valueFromASTUntyped((g = a.arguments[e]).value, b)) && (c[p(g)] = h, 
      d++);
    }
  }
  return 0 < d ? c : null;
}

function ca(a, b) {
  var d, e, f, g, h, c = {};
  if (!b) {
    return c;
  }
  if (a.variableDefinitions) {
    for (d = 0, e = a.variableDefinitions.length; d < e; d++) {
      c[g = p((f = a.variableDefinitions[d]).variable)] = void 0 === b[g] && f.defaultValue ? valueFromASTUntyped(f.defaultValue, b) : b[g];
    }
  }
  for (h in b) {
    h in c || (c[h] = b[h]);
  }
  return c;
}

function x(a, b) {
  var c = "";
  b.kind === Kind.INLINE_FRAGMENT ? c = a ? 'Inline Fragment on "' + a + '"' : "Inline Fragment" : b.kind === Kind.OPERATION_DEFINITION ? c = (b.name ? '"' + b.name.value + '"' : "Unnamed") + " " + b.operation : b.kind === Kind.FRAGMENT_DEFINITION && (c = '"' + b.name.value + '" Fragment');
  c && w.push(c);
}

function ea() {
  return w.length ? "\n(Caused At: " + w.join(", ") + ")" : "";
}

function z(a, b, c) {
  if (!a) {
    throw a = b || "Minfied Error #" + c + "\n", "production" !== process.env.NODE_ENV && (a += ea()), 
    (c = Error(a + "\nhttps://bit.ly/2XbVrpR#" + c)).name = "Graphcache Error", c;
  }
}

function A(a, b) {
  da.has(a) || (console.warn(a + ea() + "\nhttps://bit.ly/2XbVrpR#" + b), da.add(a));
}

function fa(a) {
  return a.kind === Kind.FRAGMENT_DEFINITION;
}

function ma(a) {
  return a.kind === Kind.OPERATION_DEFINITION;
}

function B(a) {
  z(!!(a = a.definitions.find(ma)), "production" !== process.env.NODE_ENV ? "Invalid GraphQL document: All GraphQL documents must contain an OperationDefinitionnode for a query, subscription, or mutation." : "", 1);
  return a;
}

function na(a, b) {
  a[p(b)] = b;
  return a;
}

function C(a) {
  return a.definitions.filter(fa).reduce(na, {});
}

function oa(a, b) {
  var d, e, f, c = a.directives;
  if (!c) {
    return !0;
  }
  for (d = 0, e = c.length; d < e; d++) {
    if (("include" === (a = p(f = c[d])) || "skip" === a) && f.arguments && f.arguments[0] && "if" === p(f.arguments[0])) {
      return b = valueFromASTUntyped(f.arguments[0].value, b), "include" === a ? !!b : !b;
    }
  }
  return !0;
}

function qa(a, b, c) {
  if (pa.test(c)) {
    return !0;
  }
  return !!(a = E(a, b, c)) && isNullableType(a.type);
}

function ra(a, b, c) {
  if (!(a = E(a, b, c))) {
    return !1;
  }
  a = isNonNullType(a.type) ? a.type.ofType : a.type;
  return isListType(a) && isNullableType(a.ofType);
}

function E(a, b, c) {
  sa(a = a.getType(b), b);
  a = a.getFields()[c];
  "production" !== process.env.NODE_ENV && (a || A("Invalid field: The field `" + c + "` does not exist on `" + b + "`, but the GraphQL document expects it to exist.\nTraversal will continue, however this may lead to undefined behavior!", 4));
  return a;
}

function sa(a, b) {
  z(a instanceof GraphQLObjectType, "production" !== process.env.NODE_ENV ? "Invalid Object type: The type `" + b + "` is not an object in the defined schema, but the GraphQL document is traversing it." : "", 3);
}

function ua(a) {
  "production" !== process.env.NODE_ENV && A("Invalid resolver: `" + a + "` is not in the defined schema, but the `resolvers` option is referencing it.", 23);
}

function H(a, b) {
  return b ? a + "(" + stringifyVariables(b) + ")" : a;
}

function xa(a) {
  var b = a.indexOf("(");
  return -1 < b ? {
    fieldKey: a,
    fieldName: a.slice(0, b),
    arguments: JSON.parse(a.slice(b + 1, -1))
  } : {
    fieldKey: a,
    fieldName: a,
    arguments: null
  };
}

function ya(a, b) {
  return a.replace(/\./g, "%2e") + "." + b;
}

function za(a) {
  var b = a.indexOf(".");
  return {
    entityKey: a.slice(0, b).replace(/%2e/g, "."),
    fieldKey: a = a.slice(b + 1)
  };
}

function I() {
  return Object.create(null);
}

function N(a, b, c, d) {
  Aa = a;
  J = b;
  K = I();
  M = !!d;
  "production" !== process.env.NODE_ENV && (w.length = 0);
  c ? d || 0 < b.optimisticOrder.length ? (d || b.commutativeKeys.has(c) ? d && b.commutativeKeys.delete(c) : O(b, c), 
  L = c, -1 === b.optimisticOrder.indexOf(c) && b.optimisticOrder.unshift(c), b.refLock[c] || (b.refLock[c] = I(), 
  b.links.optimistic[c] = new Map, b.records.optimistic[c] = new Map)) : (L = null, 
  Ba(b, c)) : L = null;
}

function S() {
  "production" !== process.env.NODE_ENV && Ea();
  var b = J, c = L;
  M = !1;
  L = null;
  if (c && -1 < b.optimisticOrder.indexOf(c)) {
    for (c = b.optimisticOrder.length; 0 <= --c && b.refLock[b.optimisticOrder[c]] && b.commutativeKeys.has(b.optimisticOrder[c]); ) {
      Fa(b.optimisticOrder[c]);
    }
  }
  K = J = Aa = null;
  "production" !== process.env.NODE_ENV && (w.length = 0);
  "test" === process.env.NODE_ENV || b.defer || (b.defer = !0, Promise.resolve().then((function a() {
    N("write", b, null);
    J.gc.forEach(Ca);
    !function Da() {
      if (J.storage) {
        M = !0;
        var b = I();
        J.persist.forEach((function a(a) {
          var f, c = za(a), e = c.entityKey;
          void 0 !== (f = V(e, c = c.fieldKey)) ? b[a] = ":" + stringifyVariables(f) : void 0 !== (f = U(e, c)) ? b[a] = stringifyVariables(f) : b[a] = void 0;
        }));
        M = !1;
        J.storage.writeData(b);
        J.persist.clear();
      }
    }();
    S();
    b.defer = !1;
  })));
}

function Ga(a, b, c) {
  N("read", a, b, c);
  S();
}

function Ea() {
  z(null !== K, "production" !== process.env.NODE_ENV ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2);
  return K;
}

function Ha(a, b, c, d) {
  var e = (a = L ? a.optimistic[L] : a.base).get(b);
  void 0 === e && a.set(b, e = I());
  void 0 !== d || L ? e[c] = d : delete e[c];
}

function Ia(a, b, c) {
  var d, e, f, g, h;
  for (e = 0, f = J.optimisticOrder.length; e < f; e++) {
    if ((h = a.optimistic[g = J.optimisticOrder[e]]) && (!M || J.commutativeKeys.has(g)) && void 0 !== (d = h.get(b)) && c in d) {
      return d[c];
    }
  }
  return void 0 !== (d = a.base.get(b)) ? d[c] : void 0;
}

function Ja(a, b, c, d) {
  var e = void 0 !== b[c] ? b[c] : 0;
  b = b[c] = e + d | 0;
  void 0 !== a && (0 >= b ? a.add(c) : 0 >= e && 0 < b && a.delete(c));
}

function Ka(a, b, c, d) {
  var e, f, g;
  if ("string" == typeof c) {
    Ja(a, b, c, d);
  } else if (Array.isArray(c)) {
    for (e = 0, f = c.length; e < f; e++) {
      (g = c[e]) && Ja(a, b, g, d);
    }
  }
}

function La(a, b, c) {
  if (void 0 !== c) {
    for (var d in c) {
      b.has(d) || (a.push(xa(d)), b.add(d));
    }
  }
}

function Ma(a, b, c, d) {
  var e, f, g;
  La(a, b, d.base.get(c));
  for (e = 0, f = J.optimisticOrder.length; e < f; e++) {
    void 0 !== (g = d.optimistic[J.optimisticOrder[e]]) && La(a, b, g.get(c));
  }
}

function Ca(a, b, c) {
  var d, e;
  if (0 < (J.refCount[a] || 0)) {
    c.delete(a);
  } else {
    for (d in J.refLock) {
      if (0 < ((b = J.refLock[d])[a] || 0)) {
        return;
      }
      delete b[a];
    }
    delete J.refCount[a];
    c.delete(a);
    J.records.base.delete(a);
    if (d = J.links.base.get(a)) {
      J.links.base.delete(a);
      for (e in d) {
        Ka(c, J.refCount, d[e], -1);
      }
    }
  }
}

function T(a, b) {
  "__typename" !== b && (a !== J.queryRootKey ? K[a] = !0 : void 0 !== b && (K[a + "." + b] = !0));
}

function U(a, b) {
  T(a, b);
  return Ia(J.records, a, b);
}

function V(a, b) {
  T(a, b);
  return Ia(J.links, a, b);
}

function W(a, b, c) {
  T(a, b);
  !M && J.storage && J.persist.add(ya(a, b));
  Ha(J.records, a, b, c);
}

function Na(a, b, c) {
  var e, f, g, d = J;
  if (L) {
    e = d.refLock[L] || (d.refLock[L] = I());
    f = d.links.optimistic[L];
  } else {
    e = d.refCount;
    f = d.links.base;
    g = d.gc;
  }
  f = (f = f && f.get(a)) && f[b];
  T(a, b);
  !M && J.storage && J.persist.add(ya(a, b));
  Ha(d.links, a, b, c);
  Ka(g, e, f, -1);
  Ka(g, e, c, 1);
}

function O(a, b) {
  var c = a.optimisticOrder.indexOf(b);
  -1 === c ? a.optimisticOrder.unshift(b) : a.commutativeKeys.has(b) || (Oa(a, b), 
  a.optimisticOrder.splice(c, 1), a.optimisticOrder.unshift(b));
  a.commutativeKeys.add(b);
}

function Oa(a, b) {
  a.refLock[b] && (delete a.refLock[b], delete a.records.optimistic[b], delete a.links.optimistic[b]);
}

function Ba(a, b) {
  var c = a.optimisticOrder.indexOf(b);
  -1 < c && (a.optimisticOrder.splice(c, 1), a.commutativeKeys.delete(b));
  Oa(a, b);
}

function Pa(a, b) {
  for (var c in a) {
    Na(b, c, a[c]);
  }
}

function Qa(a, b) {
  for (var c in a) {
    W(b, c, a[c]);
  }
}

function Fa(a) {
  var c, b = K;
  K = I();
  (c = J.links.optimistic[a]) && c.forEach(Pa);
  (c = J.records.optimistic[a]) && c.forEach(Qa);
  K = b;
  Ba(J, a);
}

function Ra(a) {
  var b = J.links, c = J.records, d = [], e = new Set;
  T(a);
  Ma(d, e, a, b);
  Ma(d, e, a, c);
  return d;
}

function X(a, b, c, d, e, f) {
  return {
    store: a,
    variables: b,
    fragments: c,
    parentTypeName: d,
    parentKey: e,
    parentFieldKey: "",
    fieldName: "",
    partial: !1,
    optimistic: !!f
  };
}

function Sa(a, b, c, d) {
  if (!b) {
    return !1;
  }
  var e = aa(a);
  if (b === e) {
    return !0;
  }
  "production" !== process.env.NODE_ENV && A("Heuristic Fragment Matching: A fragment is trying to match against the `" + b + "` type, but the type condition is `" + e + "`. Since GraphQL allows for interfaces `" + e + "` may be aninterface.\nA schema needs to be defined for this match to be deterministic, otherwise the fragment will be matched heuristically!", 16);
  return !v(a).some((function(a) {
    if (a.kind !== Kind.FIELD) {
      return !1;
    }
    a = H(p(a), ba(a, d));
    return !(void 0 !== U(c, a) || void 0 !== V(c, a));
  }));
}

function Ta(a, b, c, d) {
  var e = [ 0 ], f = [ c ];
  return {
    next: function() {
      var c, h, k, l, n, m;
      for (;0 !== e.length; ) {
        if ((c = e[e.length - 1]++) >= (h = f[f.length - 1]).length) {
          e.pop(), f.pop(), "production" !== process.env.NODE_ENV && w.pop();
        } else if (oa(c = h[c], d.variables)) {
          if (c.kind === Kind.FIELD) {
            if ("__typename" !== p(c)) {
              return c;
            }
          } else if (void 0 !== (c = c.kind === Kind.INLINE_FRAGMENT ? c : d.fragments[p(c)])) {
            "production" !== process.env.NODE_ENV && x(a, c);
            if (d.store.schema) {
              h = d.store.schema;
              k = aa(c);
              if ((l = a) && k) {
                if (l === k) {
                  h = !0;
                } else {
                  n = h.getType(k), m = h.getType(l);
                  n instanceof GraphQLObjectType ? h = n === m : (z(n instanceof GraphQLInterfaceType || n instanceof GraphQLUnionType, "production" !== process.env.NODE_ENV ? "Invalid Abstract type: The type `" + k + "` is not an Interface or Union type in the defined schema, but a fragment in the GraphQL document is using it as a type condition." : "", 5), 
                  sa(m, l), h = h.isPossibleType(n, m));
                }
              } else {
                h = !1;
              }
            } else {
              h = Sa(c, a, b, d.variables);
            }
            h && (e.push(0), f.push(v(c)));
          }
        }
      }
    }
  };
}

function Ua(a) {
  return void 0 === a ? null : a;
}

function Va(a, b, c, d) {
  N("write", a.data, d || null);
  a = Wa(a, b, c);
  S();
  return a;
}

function Wa(a, b, c) {
  var d = B(b.query), e = {
    data: c,
    dependencies: Ea()
  }, f = a.rootFields[d.operation];
  a = X(a, ca(d, b.variables), C(b.query), f, f);
  "production" !== process.env.NODE_ENV && x(f, d);
  Xa(a, f, v(d), c);
  "production" !== process.env.NODE_ENV && w.pop();
  return e;
}

function Ya(a, b, c) {
  N("write", a.data, c, !0);
  c = B(b.query);
  var d = {
    data: {},
    dependencies: Ea()
  }, e = a.rootFields[c.operation];
  z(e === a.rootFields.mutation, "production" !== process.env.NODE_ENV ? "writeOptimistic(...) was called with an operation that is not a mutation.\nThis case is unsupported and should never occur." : "", 10);
  "production" !== process.env.NODE_ENV && x(e, c);
  Xa(a = X(a, ca(c, b.variables), C(b.query), e, e, !0), e, v(c), d.data);
  "production" !== process.env.NODE_ENV && w.pop();
  S();
  return d;
}

function Xa(a, b, c, d) {
  var h, k, l, n, m, q, u, r, D, e = b === a.store.rootFields.query, f = !e && !!a.store.rootNames[b], g = f || e ? b : d.__typename;
  if (g) {
    f || e || !b || W(b, "__typename", g);
    c = Ta(g, b || g, c, a);
    for (;h = c.next(); ) {
      l = H(e = p(h), k = ba(h, a.variables)), m = d[n = h.alias ? h.alias.value : p(h)];
      if ("production" !== process.env.NODE_ENV) {
        if (f || void 0 !== m) {
          if (a.store.schema && g) {
            q = a.store.schema, u = g;
            pa.test(r = e) || E(q, u, r);
          }
        } else {
          e = a.optimistic ? "\nYour optimistic result may be missing a field!" : "";
          k = void 0 === h.selectionSet ? "scalar (number, boolean, etc)" : "selection set";
          "production" !== process.env.NODE_ENV && A("Invalid undefined: The field at `" + l + "` is `undefined`, but the GraphQL query expects a " + k + " for this field." + e, 13);
          continue;
        }
      }
      if (a.optimistic && f) {
        if (!(m = a.store.optimisticMutations[e])) {
          continue;
        }
        u = g;
        r = l;
        D = e;
        (q = a).parentTypeName = g;
        q.parentKey = u;
        q.parentFieldKey = r;
        q.fieldName = D;
        m = d[n] = Ua(m(k || {}, a.store, a));
      }
      h.selectionSet ? b && !f ? (n = b + "." + l, Na(b || g, l, h = Za(a, v(h), Ua(m), n))) : Za(a, v(h), Ua(m)) : b && !f && W(b || g, l, m);
      f && (n = g, l = g + "." + l, q = e, (h = a).parentTypeName = g, h.parentKey = n, 
      h.parentFieldKey = l, h.fieldName = q, l = a.store.updates[g][e]) && (d[e] = m, 
      l(d, k || {}, a.store, a));
    }
  }
}

function Za(a, b, c, d) {
  var e, f, g, h;
  if (Array.isArray(c)) {
    for (e = Array(c.length), f = 0, g = c.length; f < g; f++) {
      h = Za(a, b, c[f], d ? d + "." + f : void 0);
      e[f] = h;
    }
    return e;
  }
  if (null === c) {
    return null;
  }
  e = a.store.keyOfEntity(c);
  f = c.__typename;
  "production" !== process.env.NODE_ENV && d && void 0 === a.store.keys[c.__typename] && null === e && "string" == typeof f && !$a.test(f) && A("Invalid key: The GraphQL query at the field at `" + d + "` has a selection set, but no key could be generated for the data at this field.\nYou have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `" + f + "`.\nEntities without keys will be embedded directly on the parent entity. If this is intentional, create a `keys` config for `" + f + "` that always returns null.", 15);
  Xa(a, d = e || d, b, c);
  return d || null;
}

function Y(a) {
  var b, c, d, e, f, g, h, k, l, n, m, q, u;
  this.keyOfField = H;
  a || (a = {});
  this.resolvers = a.resolvers || {};
  this.optimisticMutations = a.optimistic || {};
  this.keys = a.keys || {};
  this.updates = {
    Mutation: a.updates && a.updates.Mutation || {},
    Subscription: a.updates && a.updates.Subscription || {}
  };
  c = "Query", d = "Mutation", e = "Subscription";
  if (a.schema) {
    a = (f = this.schema = buildClientSchema(a.schema)).getQueryType();
    g = f.getMutationType();
    f = f.getSubscriptionType();
    a && (c = a.name);
    g && (d = g.name);
    f && (e = f.name);
    if ("production" !== process.env.NODE_ENV) {
      this.keys && function ta(a, b) {
        if ("production" !== process.env.NODE_ENV) {
          var d = Object.keys(a.getTypeMap());
          Object.keys(b).forEach((function c(a) {
            "production" !== process.env.NODE_ENV && -1 === d.indexOf(a) && A("Invalid Object type: The type `" + a + "` is not an object in the defined schema, but the `keys` option is referencing it.", 20);
          }));
        }
      }(this.schema, this.keys);
      if (0 < Object.keys(this.updates.Mutation).length || 0 < Object.keys(this.updates.Subscription).length) {
        if (a = this.schema, f = this.updates, "production" !== process.env.NODE_ENV) {
          g = a.getMutationType() ? Object.keys(a.getMutationType().toConfig().fields) : [];
          a = a.getSubscriptionType() ? Object.keys(a.getSubscriptionType().toConfig().fields) : [];
          h = f.Mutation ? Object.keys(f.Mutation) : [];
          f = f.Subscription ? Object.keys(f.Subscription) : [];
          for (k = 0; k < h.length; k += 1) {
            l = h[k];
            "production" !== process.env.NODE_ENV && -1 === g.indexOf(l) && A("Invalid mutation field: `" + l + "` is not in the defined schema, but the `updates.Mutation` option is referencing it.", 21);
          }
          for (g = 0; g < f.length; g += 1) {
            h = f[g], "production" !== process.env.NODE_ENV && -1 === a.indexOf(h) && A("Invalid subscription field: `" + h + "` is not in the defined schema, but the `updates.Subscription` option is referencing it.", 22);
          }
        }
      }
      if (this.resolvers && (a = this.schema, g = this.resolvers, "production" !== process.env.NODE_ENV)) {
        f = Object.keys(a.getTypeMap());
        for (n in g) {
          if ("Query" === n) {
            if (h = a.getQueryType()) {
              h = Object.keys(h.toConfig().fields);
              for (m in g.Query) {
                -1 === h.indexOf(m) && ua("Query." + m);
              }
            } else {
              ua("Query");
            }
          } else if (-1 === f.indexOf(n)) {
            ua(n);
          } else {
            for (h = Object.keys(a.getType(n).getFields()), k = 0, l = Object.keys(g[n]); k < l.length; k += 1) {
              -1 === h.indexOf(q = l[k]) && ua(n + "." + q);
            }
          }
        }
      }
      if (this.optimisticMutations && (m = this.schema, n = this.optimisticMutations, 
      "production" !== process.env.NODE_ENV)) {
        m = m.getMutationType() ? Object.keys(m.getMutationType().toConfig().fields) : [];
        for (u in n) {
          "production" !== process.env.NODE_ENV && -1 === m.indexOf(u) && A("Invalid optimistic mutation field: `" + u + "` is not a mutation field in the defined schema, but the `optimistic` option is referencing it.", 24);
        }
      }
    }
  }
  this.rootFields = {
    query: c,
    mutation: d,
    subscription: e
  };
  this.rootNames = ((b = {})[c] = "query", b[d] = "mutation", b[e] = "subscription", 
  b);
  b = c;
  this.data = {
    defer: !1,
    gc: new Set,
    persist: new Set,
    queryRootKey: b,
    refCount: I(),
    refLock: I(),
    links: {
      optimistic: I(),
      base: new Map
    },
    records: {
      optimistic: I(),
      base: new Map
    },
    commutativeKeys: new Set,
    optimisticOrder: [],
    storage: null
  };
}

function bb(a, b, c) {
  N("read", a.data, null);
  a = ab(a, b, c);
  S();
  return a;
}

function ab(a, b, c) {
  var d = B(b.query), e = a.rootFields[d.operation], f = v(d);
  a = X(a, ca(d, b.variables), C(b.query), e, e);
  "production" !== process.env.NODE_ENV && x(e, d);
  c = c || {};
  c = e !== a.store.rootFields.query ? cb(a, e, f, c) : Z(a, e, f, c);
  "production" !== process.env.NODE_ENV && w.pop();
  return {
    dependencies: Ea(),
    partial: void 0 === c ? !1 : a.partial,
    data: void 0 === c ? null : c
  };
}

function cb(a, b, c, d) {
  var e, f, g;
  if ("string" != typeof d.__typename) {
    return d;
  }
  b = Ta(b, b, c, a);
  (c = {}).__typename = d.__typename;
  for (;void 0 !== (e = b.next()); ) {
    g = d[f = e.alias ? e.alias.value : p(e)];
    void 0 !== e.selectionSet && null !== g ? (g = Ua(g), c[f] = db(a, v(e), g)) : c[f] = g;
  }
  return c;
}

function db(a, b, c) {
  if (Array.isArray(c)) {
    for (var d = Array(c.length), e = 0, f = c.length; e < f; e++) {
      d[e] = db(a, b, c[e]);
    }
    return d;
  }
  if (null === c) {
    return null;
  }
  return null !== (d = a.store.keyOfEntity(c)) ? void 0 === (a = Z(a, d, b, {})) ? null : a : cb(a, c.__typename, b, c);
}

function Z(a, b, c, d, e) {
  var k, l, n, m, q, u, r, D, F, G, P, t, y, Q, f = a.store, g = b === f.rootFields.query, h = e && f.keyOfEntity(e) || b;
  "production" !== process.env.NODE_ENV && !g && a.store.rootNames[h] && A("Invalid root traversal: A selection was being read on `" + h + "` which is an uncached root type.\nThe `" + a.store.rootFields.mutation + "` and `" + a.store.rootFields.subscription + "` types are special Operation Root Types and cannot be read back from the cache.", 25);
  if ("string" == typeof (b = g ? b : U(h, "__typename") || e && e.__typename)) {
    if (e && b !== e.__typename) {
      "production" !== process.env.NODE_ENV && A("Invalid resolver data: The resolver at `" + h + "` returned an invalid typename that could not be reconciled with the cache.", 8);
    } else {
      d.__typename = b;
      c = Ta(b, h, c, a);
      for (l = !1, n = !1; void 0 !== (k = c.next()); ) {
        m = p(k), q = ba(k, a.variables), u = k.alias ? k.alias.value : p(k), D = h + "." + (r = H(m, q)), 
        F = U(h, r), G = e ? e[m] : void 0, P = f.resolvers[b];
        if ("production" !== process.env.NODE_ENV && f.schema && b) {
          t = f.schema, y = b;
          pa.test(Q = m) || E(t, y, Q);
        }
        t = void 0;
        if (void 0 !== G && void 0 === k.selectionSet) {
          t = G;
        } else if (z(null !== Aa, "production" !== process.env.NODE_ENV ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2), 
        "read" === Aa && P && "function" == typeof P[m]) {
          if (G = h, t = D, y = m, (r = a).parentTypeName = b, r.parentKey = G, r.parentFieldKey = t, 
          r.fieldName = y, void 0 !== F && (d[u] = F), t = P[m](d, q || {}, f, a), void 0 !== k.selectionSet && (t = eb(a, b, m, D, v(k), d[u] || {}, t)), 
          f.schema && null === t && !qa(f.schema, b, m)) {
            return;
          }
        } else {
          void 0 === k.selectionSet ? t = F : void 0 !== G ? t = eb(a, b, m, D, v(k), d[u], G) : void 0 !== (q = V(h, r)) ? t = fb(a, q, b, m, v(k), d[u]) : "object" == typeof F && null !== F && (t = F);
        }
        if (void 0 === t && f.schema && qa(f.schema, b, m)) {
          n = !0, d[u] = null;
        } else {
          if (void 0 === t) {
            return;
          }
          l = !0;
          d[u] = t;
        }
      }
      n && (a.partial = !0);
      return g && n && !l ? void 0 : d;
    }
  }
}

function eb(a, b, c, d, e, f, g) {
  var h, k, l, n, m;
  if (Array.isArray(g)) {
    h = !(h = a.store).schema || ra(h.schema, b, c);
    for (k = Array(g.length), l = 0, n = g.length; l < n; l++) {
      if (void 0 !== (m = eb(a, b, c, d + "." + l, e, null != f ? f[l] : void 0, g[l])) || h) {
        k[l] = void 0 !== m ? m : null;
      } else {
        return;
      }
    }
    return k;
  }
  if (null == g) {
    return g;
  }
  if (null === f) {
    return null;
  }
  if ("string" == typeof g || "object" == typeof g && "string" == typeof g.__typename) {
    return b = f || {}, "string" == typeof g ? Z(a, g, e, b) : Z(a, d, e, b, g);
  }
  "production" !== process.env.NODE_ENV && A("Invalid resolver value: The field at `" + d + "` is a scalar (number, boolean, etc), but the GraphQL query expects a selection set for this field.", 9);
}

function fb(a, b, c, d, e, f) {
  var g, h, k, l, n;
  if (Array.isArray(b)) {
    g = (g = a.store).schema && ra(g.schema, c, d);
    for (h = Array(b.length), k = 0, l = b.length; k < l; k++) {
      if (void 0 !== (n = fb(a, b[k], c, d, e, null != f ? f[k] : void 0)) || g) {
        h[k] = void 0 !== n ? n : null;
      } else {
        return;
      }
    }
    return h;
  }
  return null === b || null === f ? null : Z(a, b, e, f || {});
}

function gb(a, b) {
  return _extends({}, a, {
    context: _extends({}, a.context, {
      meta: _extends({}, a.context.meta, {
        cacheOutcome: b
      })
    })
  });
}

function hb(a, b) {
  return _extends({}, a, {
    context: _extends({}, a.context, {
      requestPolicy: b
    })
  });
}

function ib(a) {
  return "query" === a.operationName && "network-only" !== a.context.requestPolicy;
}

function jb(a) {
  return "query" !== a.operationName || "network-only" === a.context.requestPolicy;
}

function kb(a) {
  return "miss" !== a.outcome || "cache-only" === a.operation.context.requestPolicy;
}

function lb(a) {
  return function(b) {
    function c(a, b) {
      var va, c = a.operation, d = a.error, f = a.extensions, g = c.key;
      if ("mutation" === c.operationName) {
        h(b, R.get(g));
        R.delete(g);
      } else {
        O(y.data, c.key);
      }
      if (a.data) {
        if (h(b, g = Va(y, c, a.data, g).dependencies), g = bb(y, c, a.data), a.data = g.data, 
        "query" === c.operationName) {
          h(b, va = g.dependencies);
        }
      } else {
        Ga(y.data, c.key);
      }
      va && e(a.operation, va);
      return {
        data: a.data,
        error: d,
        extensions: f,
        operation: c
      };
    }
    function d(a) {
      var b = bb(y, a), c = b.data ? b.partial ? "partial" : "hit" : "miss";
      e(a, b.dependencies);
      return {
        outcome: c,
        operation: a,
        data: b.data,
        dependencies: b.dependencies
      };
    }
    function e(a, b) {
      for (var c in b) {
        (ia[c] || (ia[c] = [])).push(a.key), ja.set(a.key, a);
      }
    }
    function f(a) {
      var b, c, d, e, f, k, ha;
      if ("query" === a.operationName) {
        O(y.data, a.key);
      } else if ("teardown" === a.operationName) {
        ja.delete(a.key), Ga(y.data, a.key);
      } else if ("mutation" === a.operationName && "network-only" !== a.context.requestPolicy) {
        b = Ya(y, a, a.key).dependencies;
        a: {
          for (c in b) {
            c = !1;
            break a;
          }
          c = !0;
        }
        if (!c) {
          for (d in b) {
            ka[d] = !0;
          }
          R.set(a.key, b);
          h(d = new Set, b);
          g(a, d);
        }
      }
      b = _extends;
      if (a.variables) {
        if (d = B(a.query), (c = a.variables) && d.variableDefinitions) {
          for (e = {}, f = 0, k = d.variableDefinitions.length; f < k; f++) {
            e[ha = p(d.variableDefinitions[f].variable)] = c[ha];
          }
          d = e;
        } else {
          d = void 0;
        }
      } else {
        d = a.variables;
      }
      return b({}, a, {
        variables: d,
        query: formatDocument(a.query)
      });
    }
    function g(a, b) {
      b.forEach((function(b) {
        var c, d;
        if (b !== a.key) {
          if (c = ja.get(b)) {
            ja.delete(b);
            d = "cache-first";
            wa.has(b) && (wa.delete(b), d = "cache-and-network");
            P.reexecuteOperation(hb(c, d));
          }
        }
      }));
    }
    function h(a, b) {
      var c, d, e;
      if (b) {
        for (c in b) {
          if (b = ia[c]) {
            ia[c] = [];
            for (d = 0, e = b.length; d < e; d++) {
              a.add(b[d]);
            }
          }
        }
      }
    }
    function k(a) {
      for (var b in a) {
        if (ka[b]) {
          return !0;
        }
      }
      return !1;
    }
    function n(a) {
      "production" !== process.env.NODE_ENV && t({
        type: "cacheMiss",
        message: "The result could not be retrieved from the cache",
        operation: a.operation,
        source: "cacheExchange"
      });
      return gb(a.operation, "miss");
    }
    function m(a) {
      return "miss" === a.outcome && "cache-only" !== a.operation.context.requestPolicy && !k(a.dependencies);
    }
    function q(a) {
      var b = a.operation, c = a.outcome, d = a.dependencies, e = {
        operation: gb(b, c),
        data: a.data,
        error: a.error,
        extensions: a.extensions
      };
      if ("cache-and-network" === b.context.requestPolicy || "cache-first" === b.context.requestPolicy && "partial" === c) {
        e.stale = !0, k(d) ? "cache-and-network" === b.context.requestPolicy && wa.add(b.key) : P.reexecuteOperation(hb(b, "network-only"));
      }
      "production" !== process.env.NODE_ENV && t({
        type: "cacheHit",
        message: "A requested operation was found and returned from the cache.",
        operation: a.operation,
        data: {
          value: e
        },
        source: "cacheExchange"
      });
      return e;
    }
    function u(a) {
      var b = new Set, d = c(a, b);
      g(a.operation, b);
      return d;
    }
    function r(a) {
      return !R.has(a.operation.key);
    }
    function D(a) {
      var b, d, e;
      if (la.push(a) < R.size) {
        return empty;
      }
      for (b = 0; b < la.length; b++) {
        O(y.data, la[b].operation.key);
      }
      for (d in ka) {
        delete ka[d];
      }
      b = [];
      d = new Set;
      for (;e = la.shift(); ) {
        b.push(c(e, d));
      }
      g(a.operation, d);
      return fromArray(b);
    }
    function F(a) {
      return R.has(a.operation.key);
    }
    var Q, R, la, ja, ka, wa, ia, G = b.forward, P = b.client, t = b.dispatchDebug, y = new Y(a);
    a && a.storage && (Q = a.storage.readData().then((function l(b) {
      var e, f, g, h, c = y.data, d = a.storage;
      N("read", c, null);
      for (e in b) {
        if (void 0 !== (f = b[e])) {
          h = (g = za(e)).entityKey;
          g = g.fieldKey;
          ":" === f[0] ? Na(h, g, JSON.parse(f.slice(1))) : W(h, g, JSON.parse(f));
        }
      }
      S();
      c.storage = d;
    })));
    R = new Map, la = [], ja = new Map, ka = I(), wa = new Set, ia = I();
    return function(a) {
      var b, c;
      a = share(a);
      b = Q ? mergeMap(fromArray)(take(1)(buffer(fromPromise(Q))(a))) : empty;
      b = share(concat([ b, a ]));
      a = share(map(d)(filter(ib)(b)));
      b = filter(jb)(b);
      c = map(n)(filter(m)(a));
      a = map(q)(filter(kb)(a));
      c = share(G(map(f)(merge([ b, c ]))));
      b = map(u)(filter(r)(c));
      c = mergeMap(D)(filter(F)(c));
      return merge([ b, c, a ]);
    };
  };
}

function mb(a) {
  return {
    query: print(a.query),
    variables: a.variables
  };
}

function offlineExchange(a) {
  return function(b) {
    function e(a) {
      var b, c, d, e, f;
      (b = "subscription" === a.operation.operationName) || (b = !((b = a.error) && b.networkError && !b.response && ("undefined" != typeof navigator && !1 === navigator.onLine || /request failed|failed to fetch|network\s?error/i.test(b.networkError.message))));
      if (b) {
        return !0;
      }
      if ("mutation" === a.operation.operationName) {
        a: {
          b = m;
          d = (c = a.operation).variables || I(), e = C(c.query);
          c = [].concat(v(B(c.query)));
          for (;f = c.pop(); ) {
            if (oa(f, d)) {
              if (f.kind !== Kind.FIELD) {
                (f = f.kind === Kind.INLINE_FRAGMENT ? f : e[p(f)]) && c.push.apply(c, v(f));
              } else if (b[p(f)]) {
                b = !0;
                break a;
              }
            }
          }
          b = !1;
        }
        return b ? (q.push(a.operation), u(), !1) : !0;
      }
      return !1;
    }
    var l, n, m, q, u, r, D, h = b.forward, k = b.client;
    b = b.dispatchDebug;
    n = h;
    if ((l = a.storage) && l.onOnline && l.readMetadata && l.writeMetadata) {
      m = a.optimistic || {}, q = [], u = function c() {
        l.writeMetadata(q.map(mb));
      }, r = !1;
      n = function f(a) {
        return filter(e)(h(a));
      };
      l.onOnline(D = function d() {
        for (var a; !r && (a = q.shift()); ) {
          r = !0, k.dispatchOperation(k.createRequestOperation("mutation", a)), r = !1;
        }
        u();
      });
      l.readMetadata().then((function g(a) {
        if (a) {
          for (var b = 0; b < a.length; b++) {
            q.push(createRequest(a[b].query, a[b].variables));
          }
        }
        D();
      }));
    }
    return lb(a)({
      forward: n,
      client: k,
      dispatchDebug: b
    });
  };
}

var da, w, pa, Aa, J, K, L, M, $a;

import { print } from "graphql/language/printer";

import { share, mergeMap, fromArray, take, buffer, fromPromise, empty, concat, map, filter, merge } from "wonka";

import { buildClientSchema } from "graphql/utilities/buildClientSchema";

import { stringifyVariables, createRequest, formatDocument } from "@urql/core";

import { isNullableType, isNonNullType, isListType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType } from "graphql/type/definition";

import { Kind } from "graphql/language/kinds";

import { valueFromASTUntyped } from "graphql/utilities/valueFromASTUntyped";

import { _ as _extends } from "./5301ccd2.mjs";

da = new Set, w = [];

pa = /^__/;

Aa = null, J = null, K = null, L = null, M = !1;

$a = /^__|PageInfo|(Connection|Edge)$/;

Y.prototype.keyOfEntity = function(a) {
  var e, b = a.__typename, c = a.id, d = a._id;
  if (!b) {
    return null;
  }
  if (void 0 !== this.rootNames[b]) {
    return b;
  }
  this.keys[b] ? e = this.keys[b](a) : null != c ? e = "" + c : null != d && (e = "" + d);
  return e ? b + ":" + e : null;
};

Y.prototype.resolveFieldByKey = function(a, b) {
  if (null === (a = null !== a && "string" != typeof a ? this.keyOfEntity(a) : a)) {
    return null;
  }
  var c = U(a, b);
  return void 0 !== c ? c : (b = V(a, b)) ? b : null;
};

Y.prototype.resolve = function(a, b, c) {
  return this.resolveFieldByKey(a, H(b, c));
};

Y.prototype.invalidate = function(a, b, c) {
  var e, d = "string" == typeof a ? a : this.keyOfEntity(a);
  z(d, "production" !== process.env.NODE_ENV ? "object" == "Can't generate a key for invalidate(...).\nYou have to pass an id or _id field or create a custom `keys` field for `" + typeof a ? a.__typename : a + "`." : "", 19);
  a = b ? [ {
    fieldKey: H(b, c)
  } ] : Ra(d);
  b = 0;
  for (c = a.length; b < c; b++) {
    void 0 !== V(d, e = a[b].fieldKey) ? Na(d, e, void 0) : W(d, e, void 0);
  }
};

Y.prototype.inspectFields = function(a) {
  return null !== (a = null !== a && "string" != typeof a ? this.keyOfEntity(a) : a) ? Ra(a) : [];
};

Y.prototype.updateQuery = function(a, b) {
  a = createRequest(a.query, a.variables);
  null !== (b = b(this.readQuery(a))) && Wa(this, a, b);
};

Y.prototype.readQuery = function(a) {
  return ab(this, createRequest(a.query, a.variables)).data;
};

Y.prototype.readFragment = function(a, b, c) {
  var d, e;
  if (void 0 === (d = (a = C(a))[(d = Object.keys(a))[0]])) {
    "production" !== process.env.NODE_ENV && A("readFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 6), 
    c = null;
  } else {
    e = d.typeCondition.name.value;
    "string" == typeof b || b.__typename || (b.__typename = e);
    (b = "string" != typeof b ? this.keyOfEntity(_extends({}, {
      __typename: e
    }, b)) : b) ? ("production" !== process.env.NODE_ENV && x(e, d), c = Z(c = X(this, c || {}, a, e, b), b, v(d), {}) || null, 
    "production" !== process.env.NODE_ENV && w.pop()) : ("production" !== process.env.NODE_ENV && A("Can't generate a key for readFragment(...).\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 7), 
    c = null);
  }
  return c;
};

Y.prototype.writeFragment = function(a, b, c) {
  var d, e, f;
  if (void 0 === (d = (a = C(a))[(d = Object.keys(a))[0]])) {
    "production" !== process.env.NODE_ENV && A("writeFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 11);
  } else {
    b = _extends({}, {
      __typename: e = d.typeCondition.name.value
    }, b);
    (f = this.keyOfEntity(b)) ? ("production" !== process.env.NODE_ENV && x(e, d), Xa(c = X(this, c || {}, a, e, f), f, v(d), b), 
    "production" !== process.env.NODE_ENV && w.pop()) : "production" !== process.env.NODE_ENV && A("Can't generate a key for writeFragment(...) data.\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 12);
  }
};

export { Y as Store, lb as cacheExchange, Ga as noopDataState, offlineExchange, bb as query, O as reserveLayer, Va as write, Ya as writeOptimistic };
//# sourceMappingURL=urql-exchange-graphcache.mjs.map
